{"version":3,"file":"traversal.js","sourceRoot":"","sources":["../src/traversal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,UAAU,CAAA;AAChD,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAA;AAE5C,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAA;AAiC1C,MAAM,UAAU,QAAQ,CAAC,IAAU,EAAE,OAAyB;IAC7D,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;QACpB,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;KAC5B;SAAM,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;QAC5B,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;KAC7B;AACF,CAAC","sourcesContent":["import { isElement, isTextNode } from './dom.js'\nimport { handleElement } from './element.js'\nimport { StackingLayers } from './stacking.js'\nimport { handleTextNode } from './text.js'\n\nexport interface DomToSvgOptions {\n\t/**\n\t * To visual area to contrain the SVG too.\n\t * Elements that do not intersect the capture area are not included in the SVG.\n\t */\n\tcaptureArea?: DOMRectReadOnly\n\n\t/**\n\t * Whether to include `<a>` tags in the SVG so links are still interactive.\n\t *\n\t * @default true\n\t */\n\tkeepLinks?: boolean\n}\n\nexport interface TraversalContext {\n\treadonly svgDocument: XMLDocument\n\treadonly currentSvgParent: SVGElement\n\treadonly parentStackingLayer: SVGGElement\n\treadonly stackingLayers: StackingLayers\n\n\t/**\n\t * Masks for ancestor elements (that are `overflow: hidden`) affecting the current element, from closest to furthest.\n\t */\n\treadonly ancestorMasks: { mask: SVGMaskElement; forElement: Element }[]\n\n\treadonly labels: Map<HTMLLabelElement, string>\n\treadonly getUniqueId: (prefix: string) => string\n\treadonly options: Required<DomToSvgOptions>\n}\n\nexport function walkNode(node: Node, context: TraversalContext): void {\n\tif (isElement(node)) {\n\t\thandleElement(node, context)\n\t} else if (isTextNode(node)) {\n\t\thandleTextNode(node, context)\n\t}\n}\n"]}