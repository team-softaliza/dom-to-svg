{"version":3,"file":"css.js","sourceRoot":"","sources":["../src/css.ts"],"names":[],"mappings":"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","sourcesContent":["export const isCSSFontFaceRule = (rule: CSSRule): rule is CSSFontFaceRule => rule.type === CSSRule.FONT_FACE_RULE\n\nexport const isInline = (styles: CSSStyleDeclaration): boolean =>\n\tstyles.displayOutside === 'inline' || styles.display.startsWith('inline-')\n\nexport const isPositioned = (styles: CSSStyleDeclaration): boolean => styles.position !== 'static'\n\nexport const isInFlow = (styles: CSSStyleDeclaration): boolean =>\n\tstyles.float !== 'none' && styles.position !== 'absolute' && styles.position !== 'fixed'\n\nexport const isTransparent = (color: string): boolean => color === 'transparent' || color === 'rgba(0, 0, 0, 0)'\n\nexport const hasUniformBorder = (styles: CSSStyleDeclaration): boolean =>\n\tparseFloat(styles.borderTopWidth) !== 0 &&\n\tstyles.borderTopStyle !== 'none' &&\n\tstyles.borderTopStyle !== 'inset' &&\n\tstyles.borderTopStyle !== 'outset' &&\n\t!isTransparent(styles.borderTopColor) &&\n\t// Cannot use border property directly as in Firefox those are empty strings.\n\t// Need to get the specific border properties from the specific sides.\n\t// https://stackoverflow.com/questions/41696063/getcomputedstyle-returns-empty-strings-on-ff-when-instead-crome-returns-a-comp\n\tstyles.borderTopWidth === styles.borderLeftWidth &&\n\tstyles.borderTopWidth === styles.borderRightWidth &&\n\tstyles.borderTopWidth === styles.borderBottomWidth &&\n\tstyles.borderTopColor === styles.borderLeftColor &&\n\tstyles.borderTopColor === styles.borderRightColor &&\n\tstyles.borderTopColor === styles.borderBottomColor &&\n\tstyles.borderTopStyle === styles.borderLeftStyle &&\n\tstyles.borderTopStyle === styles.borderRightStyle &&\n\tstyles.borderTopStyle === styles.borderBottomStyle\n\n/** A side of a box. */\nexport type Side = 'top' | 'bottom' | 'right' | 'left'\n\n/** The 4 sides of a box. */\nconst SIDES: Side[] = ['top', 'bottom', 'right', 'left']\n\n/** Whether the given side is a horizontal side. */\nexport const isHorizontal = (side: Side): boolean => side === 'bottom' || side === 'top'\n\n/**\n * The two corners for each side, in order of lower coordinate to higher coordinate.\n */\nconst CORNERS: Record<Side, [Side, Side]> = {\n\ttop: ['left', 'right'],\n\tbottom: ['left', 'right'],\n\tleft: ['top', 'bottom'],\n\tright: ['top', 'bottom'],\n}\n\n/**\n * Returns the (elliptic) border radii for a given side.\n * For example, for the top side it will return the horizontal top-left and the horizontal top-right border radii.\n */\nexport function getBorderRadiiForSide(\n\tside: Side,\n\tstyles: CSSStyleDeclaration,\n\tbounds: DOMRectReadOnly\n): [number, number] {\n\tconst [horizontalStyle1, verticalStyle1] = styles\n\t\t.getPropertyValue(\n\t\t\tisHorizontal(side)\n\t\t\t\t? `border-${side}-${CORNERS[side][0]}-radius`\n\t\t\t\t: `border-${CORNERS[side][0]}-${side}-radius`\n\t\t)\n\t\t.split(' ')\n\n\tconst [horizontalStyle2, verticalStyle2] = styles\n\t\t.getPropertyValue(\n\t\t\tisHorizontal(side)\n\t\t\t\t? `border-${side}-${CORNERS[side][1]}-radius`\n\t\t\t\t: `border-${CORNERS[side][1]}-${side}-radius`\n\t\t)\n\t\t.split(' ')\n\n\tif (isHorizontal(side)) {\n\t\treturn [\n\t\t\tparseCSSLength(horizontalStyle1 || '0px', bounds.width) ?? 0,\n\t\t\tparseCSSLength(horizontalStyle2 || '0px', bounds.width) ?? 0,\n\t\t]\n\t}\n\treturn [\n\t\tparseCSSLength(verticalStyle1 || horizontalStyle1 || '0px', bounds.height) ?? 0,\n\t\tparseCSSLength(verticalStyle2 || horizontalStyle2 || '0px', bounds.height) ?? 0,\n\t]\n}\n\n/**\n * Returns the factor by which all border radii have to be scaled to fit correctly.\n *\n * @see https://drafts.csswg.org/css-backgrounds-3/#corner-overlap\n */\nexport const calculateOverlappingCurvesFactor = (styles: CSSStyleDeclaration, bounds: DOMRectReadOnly): number =>\n\tMath.min(\n\t\t...SIDES.map(side => {\n\t\t\tconst length = isHorizontal(side) ? bounds.width : bounds.height\n\t\t\tconst radiiSum = getBorderRadiiForSide(side, styles, bounds).reduce((sum, radius) => sum + radius, 0)\n\t\t\treturn length / radiiSum\n\t\t}),\n\t\t1\n\t)\n\nexport const isVisible = (styles: CSSStyleDeclaration): boolean =>\n\tstyles.displayOutside !== 'none' &&\n\tstyles.display !== 'none' &&\n\tstyles.visibility !== 'hidden' &&\n\tstyles.opacity !== '0'\n\nexport function parseCSSLength(length: string, containerLength: number): number | undefined {\n\tif (length.endsWith('px')) {\n\t\treturn parseFloat(length)\n\t}\n\tif (length.endsWith('%')) {\n\t\treturn (parseFloat(length) / 100) * containerLength\n\t}\n\treturn undefined\n}\n\nexport const unescapeStringValue = (value: string): string =>\n\tvalue\n\t\t// Replace hex escape sequences\n\t\t.replace(/\\\\([\\da-f]{1,2})/gi, (substring, codePoint) => String.fromCodePoint(parseInt(codePoint, 16)))\n\t\t// Replace all other escapes (quotes, backslash, etc)\n\t\t.replace(/\\\\(.)/g, '$1')\n\nexport function copyCssStyles(from: CSSStyleDeclaration, to: CSSStyleDeclaration): void {\n\tfor (const property of from) {\n\t\tto.setProperty(property, from.getPropertyValue(property), from.getPropertyPriority(property))\n\t}\n}\n"]}