{"version":3,"file":"text.js","sourceRoot":"","sources":["../src/text.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAA;AACpC,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAA;AAEvC,OAAO,EAAE,qBAAqB,EAAE,MAAM,EAAE,MAAM,WAAW,CAAA;AAEzD,MAAM,UAAU,cAAc,CAAC,QAAc,EAAE,OAAyB;IACvE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,EAAE;QACxC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAA;KAC7D;IACD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAA;IACjD,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAc,CAAA;IAC7C,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAA;IACrD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;QACvB,OAAM;KACN;IAED,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAA;IACvC,MAAM,CACL,SAAS,EACT,0GAA0G,CAC1G,CAAA;IAED,MAAM,cAAc,GAAG,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,YAAY,EAAE,MAAM,CAAC,CAAA;IAEhF,mBAAmB;IACnB,gDAAgD;IAChD,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,CAAA;IAEtC,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;IAE5C,uEAAuE;IACvE,cAAc,CAAC,YAAY,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAA;IAEnE,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,EAAE,CAAA;IACtD,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;IAC/B,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;IAC7B,OAAO,IAAI,EAAE;QACZ,MAAM,uBAAuB,GAAG,GAAS,EAAE;;YAC1C,IAAI,SAAS,CAAC,SAAS,EAAE;gBACxB,OAAM;aACN;YACD,MAAM,aAAa,GAAG,SAAS,CAAC,cAAc,EAAE,CAAC,CAAC,CAAE,CAAA;YACpD,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBACvE,OAAM;aACN;YACD,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;YAC3E,QAAQ,CAAC,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CAAA;YAE9C,8DAA8D;YAC9D,iFAAiF;YACjF,+FAA+F;YAC/F,uEAAuE;YACvE,MAAM,kBAAkB,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAA;YACzD,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAA;YACtC,IAAI;gBACH,SAAS,CAAC,eAAe,EAAE,CAAA;gBAC3B,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;gBAC7B,QAAQ,CAAC,WAAW,GAAG,SAAS;qBAC9B,QAAQ,EAAE;oBACX,2FAA2F;oBAC3F,gDAAgD;oBAChD,0DAA0D;qBACzD,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAA;aACrC;oBAAS;gBACT,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,kBAAkB,CAAA;gBACnD,SAAS,CAAC,eAAe,EAAE,CAAA;aAC3B;YAED,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC;YACxB,IAAI,aAAa,CAAC,KAAK,CAAC,UAAU,IAAI,QAAQ,IAAI,CAAA,MAAA,aAAa,CAAC,aAAa,0CAAE,KAAK,CAAC,UAAU,KAAI,QAAQ,EAAE;gBAC5G,CAAC,IAAI,aAAa,CAAC,KAAK,GAAG,CAAC,CAAA;aAC5B;YACD,QAAQ,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzC,QAAQ,CAAC,YAAY,CAAC,GAAG,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAA,CAAC,4DAA4D;YACxH,QAAQ,CAAC,YAAY,CAAC,YAAY,EAAE,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;YACnE,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAA;YACzD,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAChC,CAAC,CAAA;QACD,IAAI;YACH,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC,CAAA;SACnD;QAAC,OAAO,KAAK,EAAE;YACf,IAAK,KAAsB,CAAC,IAAI,KAAK,YAAY,CAAC,cAAc,EAAE;gBACjE,kBAAkB;gBAClB,uBAAuB,EAAE,CAAA;gBACzB,MAAK;aACL;YACD,MAAM,KAAK,CAAA;SACX;QACD,uEAAuE;QACvE,MAAM,cAAc,GAAG,SAAS,CAAC,cAAc,EAAE,CAAA;QACjD,cAAc;QACd,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;YACvB,6DAA6D;YAC7D,OAAM;SACN;QACD,wBAAwB;QACxB,8FAA8F;QAC9F,IAAI,cAAc,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;YACzE,wBAAwB;YACxB,6DAA6D;YAC7D,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC,CAAA;YACnD,oCAAoC;YACpC,uBAAuB,EAAE,CAAA;YACzB,0BAA0B;YAC1B,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,CAAC,SAAS,CAAC,CAAA;SACjD;KACD;IAED,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA;AAChD,CAAC;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,GAAG,CAAC;IACrC,OAAO;IACP,mBAAmB;IACnB,aAAa;IACb,WAAW;IACX,kBAAkB;IAClB,cAAc;IACd,YAAY;IACZ,cAAc;IACd,aAAa;IACb,WAAW;IACX,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;IACb,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;IACd,cAAc;IACd,cAAc;IACd,aAAa;CACJ,CAAC,CAAA;AACX,MAAM,UAAU,cAAc,CAAC,MAA2B,EAAE,UAAsB;IACjF,KAAK,MAAM,YAAY,IAAI,cAAc,EAAE;QAC1C,MAAM,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAA;QACnD,IAAI,KAAK,EAAE;YACV,UAAU,CAAC,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC,CAAA;SAC5C;KACD;IACD,kCAAkC;IAClC,UAAU,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,CAAA;AAC9C,CAAC","sourcesContent":["import { isVisible } from './css.js'\nimport { svgNamespace } from './dom.js'\nimport { TraversalContext } from './traversal.js'\nimport { doRectanglesIntersect, assert } from './util.js'\n\nexport function handleTextNode(textNode: Text, context: TraversalContext): void {\n\tif (!textNode.ownerDocument.defaultView) {\n\t\tthrow new Error(\"Element's ownerDocument has no defaultView\")\n\t}\n\tconst window = textNode.ownerDocument.defaultView\n\tconst parentElement = textNode.parentElement!\n\tconst styles = window.getComputedStyle(parentElement)\n\tif (!isVisible(styles)) {\n\t\treturn\n\t}\n\n\tconst selection = window.getSelection()\n\tassert(\n\t\tselection,\n\t\t'Could not obtain selection from window. Selection is needed for detecting whitespace collapsing in text.'\n\t)\n\n\tconst svgTextElement = context.svgDocument.createElementNS(svgNamespace, 'text')\n\n\t// Copy text styles\n\t// https://css-tricks.com/svg-properties-and-css\n\tcopyTextStyles(styles, svgTextElement)\n\n\tconst tabSize = parseInt(styles.tabSize, 10)\n\n\t// Make sure the y attribute is the bottom of the box, not the baseline\n\tsvgTextElement.setAttribute('dominant-baseline', 'text-after-edge')\n\n\tconst lineRange = textNode.ownerDocument.createRange()\n\tlineRange.setStart(textNode, 0)\n\tlineRange.setEnd(textNode, 0)\n\twhile (true) {\n\t\tconst addTextSpanForLineRange = (): void => {\n\t\t\tif (lineRange.collapsed) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconst lineRectangle = lineRange.getClientRects()[0]!\n\t\t\tif (!doRectanglesIntersect(lineRectangle, context.options.captureArea)) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconst textSpan = context.svgDocument.createElementNS(svgNamespace, 'tspan')\n\t\t\ttextSpan.setAttribute('xml:space', 'preserve')\n\n\t\t\t// lineRange.toString() returns the text including whitespace.\n\t\t\t// by adding the range to a Selection, then getting the text from that selection,\n\t\t\t// we can let the DOM handle whitespace collapsing the same way as innerText (but for a Range).\n\t\t\t// For this to work, the parent element must not forbid user selection.\n\t\t\tconst previousUserSelect = parentElement.style.userSelect\n\t\t\tparentElement.style.userSelect = 'all'\n\t\t\ttry {\n\t\t\t\tselection.removeAllRanges()\n\t\t\t\tselection.addRange(lineRange)\n\t\t\t\ttextSpan.textContent = selection\n\t\t\t\t\t.toString()\n\t\t\t\t\t// SVG does not support tabs in text. Tabs get rendered as one space character. Convert the\n\t\t\t\t\t// tabs to spaces according to tab-size instead.\n\t\t\t\t\t// Ideally we would keep the tab and create offset tspans.\n\t\t\t\t\t.replace(/\\t/g, ' '.repeat(tabSize))\n\t\t\t} finally {\n\t\t\t\tparentElement.style.userSelect = previousUserSelect\n\t\t\t\tselection.removeAllRanges()\n\t\t\t}\n\n\t\t\tlet x = lineRectangle.x;\n\t\t\tif (parentElement.style.textAnchor == 'middle' || parentElement.parentElement?.style.textAnchor == 'middle') {\n\t\t\t\tx += lineRectangle.width / 2\n\t\t\t}\n\t\t\ttextSpan.setAttribute('x', x.toString());\n\t\t\ttextSpan.setAttribute('y', lineRectangle.bottom.toString()) // intentionally bottom because of dominant-baseline setting\n\t\t\ttextSpan.setAttribute('textLength', lineRectangle.width.toString())\n\t\t\ttextSpan.setAttribute('lengthAdjust', 'spacingAndGlyphs')\n\t\t\tsvgTextElement.append(textSpan)\n\t\t}\n\t\ttry {\n\t\t\tlineRange.setEnd(textNode, lineRange.endOffset + 1)\n\t\t} catch (error) {\n\t\t\tif ((error as DOMException).code === DOMException.INDEX_SIZE_ERR) {\n\t\t\t\t// Reached the end\n\t\t\t\taddTextSpanForLineRange()\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tthrow error\n\t\t}\n\t\t// getClientRects() returns one rectangle for each line of a text node.\n\t\tconst lineRectangles = lineRange.getClientRects()\n\t\t// If no lines\n\t\tif (!lineRectangles[0]) {\n\t\t\t// Pure whitespace text nodes are collapsed and not rendered.\n\t\t\treturn\n\t\t}\n\t\t// If two (unique) lines\n\t\t// For some reason, Chrome returns 2 identical DOMRects for text with text-overflow: ellipsis.\n\t\tif (lineRectangles[1] && lineRectangles[0].top !== lineRectangles[1].top) {\n\t\t\t// Crossed a line break.\n\t\t\t// Go back one character to select exactly the previous line.\n\t\t\tlineRange.setEnd(textNode, lineRange.endOffset - 1)\n\t\t\t// Add <tspan> for exactly that line\n\t\t\taddTextSpanForLineRange()\n\t\t\t// Start on the next line.\n\t\t\tlineRange.setStart(textNode, lineRange.endOffset)\n\t\t}\n\t}\n\n\tcontext.currentSvgParent.append(svgTextElement)\n}\n\nexport const textAttributes = new Set([\n\t'color',\n\t'dominant-baseline',\n\t'font-family',\n\t'font-size',\n\t'font-size-adjust',\n\t'font-stretch',\n\t'font-style',\n\t'font-variant',\n\t'font-weight',\n\t'direction',\n\t'letter-spacing',\n\t'text-decoration',\n\t'text-anchor',\n\t'text-decoration',\n\t'text-rendering',\n\t'unicode-bidi',\n\t'word-spacing',\n\t'writing-mode',\n\t'user-select',\n] as const)\nexport function copyTextStyles(styles: CSSStyleDeclaration, svgElement: SVGElement): void {\n\tfor (const textProperty of textAttributes) {\n\t\tconst value = styles.getPropertyValue(textProperty)\n\t\tif (value) {\n\t\t\tsvgElement.setAttribute(textProperty, value)\n\t\t}\n\t}\n\t// tspan uses fill, CSS uses color\n\tsvgElement.setAttribute('fill', styles.color)\n}\n"]}