{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAiC,EAAE;IACnE,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAA;IAC5C,OAAO,MAAM,CAAC,EAAE;;QACf,MAAM,KAAK,GAAG,MAAA,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,mCAAI,CAAC,CAAA;QACzC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAA;QACjC,OAAO,GAAG,MAAM,GAAG,KAAK,EAAE,CAAA;IAC3B,CAAC,CAAA;AACF,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,SAAS,GAAG,CAAI,KAAQ,EAA2B,EAAE,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAA;AAExG;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,CAAkB,EAAE,CAAkB,EAAW,EAAE,CACxF,CAAC,CACA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,eAAe;IACnC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,IAAI,eAAe;IACnC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,iBAAiB;IACrC,kBAAkB;IAClB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,CAChB,CAAA;AAEF;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,GAAoB;IAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA;AACnD,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,OAAe,EAAE,OAAe,EAAE,IAAsB;IACtF,OAAO,OAAO,CAAC,IAAI,CAAC;QACnB,IAAI,EAAE;QACN,IAAI,OAAO,CAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;KAC9F,CAAC,CAAA;AACH,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAsD,GAAM,EAAE,KAAQ,EAAE,EAAE,CAAC,CAC7G,MAAS,EACoB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK,CAAA;AAEtD,MAAM,UAAU,MAAM,CAAC,SAAc,EAAE,OAAe;IACrD,IAAI,CAAC,SAAS,EAAE;QACf,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAA;KACxB;AACF,CAAC","sourcesContent":["export const createIdGenerator = (): ((prefix: string) => string) => {\n\tconst nextCounts = new Map<string, number>()\n\treturn prefix => {\n\t\tconst count = nextCounts.get(prefix) ?? 1\n\t\tnextCounts.set(prefix, count + 1)\n\t\treturn `${prefix}${count}`\n\t}\n}\n\nexport const isDefined = <T>(value: T): value is NonNullable<T> => value !== null && value !== undefined\n\n/**\n * Check if two rectangles (e.g. an element and the capture area) intersect.\n */\nexport const doRectanglesIntersect = (a: DOMRectReadOnly, b: DOMRectReadOnly): boolean =>\n\t!(\n\t\ta.bottom < b.top || // A is above B\n\t\ta.top > b.bottom || // A is below B\n\t\ta.right < b.left || // A is left of B\n\t\t// A is right of B\n\t\ta.left > b.right\n\t)\n\n/**\n * Calculates the length of the diagonale of a given rectangle.\n */\nexport function diagonale(box: DOMRectReadOnly): number {\n\treturn Math.sqrt(box.width ** 2 + box.height ** 2)\n}\n\nexport function withTimeout<T>(timeout: number, message: string, func: () => Promise<T>): Promise<T> {\n\treturn Promise.race([\n\t\tfunc(),\n\t\tnew Promise<never>((resolve, reject) => setTimeout(() => reject(new Error(message)), timeout)),\n\t])\n}\n\n/**\n * Type guard to check if an object is a specific member of a tagged union type.\n *\n * @param key The key to check\n * @param value The value the key has to be.\n */\nexport const isTaggedUnionMember = <T extends object, K extends keyof T, V extends T[K]>(key: K, value: V) => (\n\tobject: T\n): object is T & Record<K, V> => object[key] === value\n\nexport function assert(condition: any, message: string): asserts condition {\n\tif (!condition) {\n\t\tthrow new Error(message)\n\t}\n}\n"]}